pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker')
        APP_NAME = 'react-airbnb-clone'
        DOCKER_IMAGE = "michaldevops/${APP_NAME}"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    tools {
        nodejs 'NodeJS' // This name must match the NodeJS installation name in Jenkins
        jdk 'JDK17'     // This name must match the JDK installation name in Jenkins
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'ls -la'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        
        stage('Run Tests') {
            steps {
                sh 'npm test -- --watchAll=false'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                    npm run build
                    sonar-scanner \
                      -Dsonar.projectKey=${APP_NAME} \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=http://sonarqube:9000 \
                      -Dsonar.login=admin \
                      -Dsonar.password=admin \
                      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                    '''
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                sh 'trivy fs --severity HIGH,CRITICAL --format json -o trivy-results.json .'
                recordIssues(tools: [trivy(pattern: 'trivy-results.json')])
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh '''
                docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh '''
                echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin
                docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                docker push ${DOCKER_IMAGE}:latest
                '''
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-key']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@app-server "docker pull ${DOCKER_IMAGE}:latest && \
                    docker stop ${APP_NAME} || true && \
                    docker rm ${APP_NAME} || true && \
                    docker run -d --name ${APP_NAME} -p 80:3000 ${DOCKER_IMAGE}:latest"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images
            sh 'docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest || true'
            
            // Publish test results
            junit 'coverage/junit.xml'
            
            // Publish code coverage
            publishHTML(target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'coverage/lcov-report',
                reportFiles: 'index.html',
                reportName: 'Code Coverage Report'
            ])
        }
        
        success {
            slackSend(
                color: 'good',
                message: "Build #${env.BUILD_NUMBER} of ${env.JOB_NAME} was successful! Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
            )
        }
        
        failure {
            slackSend(
                color: 'danger',
                message: "Build #${env.BUILD_NUMBER} of ${env.JOB_NAME} failed!"
            )
        }
    }
}